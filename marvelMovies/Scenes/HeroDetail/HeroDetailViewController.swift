//
//  HeroDetailViewController.swift
//  marvelMovies
//
//  Created by Franco Marquez on 28/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit

class HeroDetailViewController: UIViewController {

    var interactor: HeroDetailInteractor!
    var router: HeroDetailRouter!

    // MARK: - Object variables
    
    var heroId: Int?
    var hero: HeroDetailScene.InitialDataLoad.ViewModel.heroInfo?
    private var heroImageSize = 200
    
    // NOTE: Only store objects here if required
    // private var displayedSomethings: [InitialDataLoad]?
    
    // MARK: - Inteface objects

    private var spinner : UIActivityIndicatorView!
    private var heroNameLabel: UILabel!
    private var heroPhoto: UIImageView!
    private var heroDescription: UILabel!
    
    // @IBOutlet private weak var somethingLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        HeroDetailConfigurator.configure(viewController: self)
        setupView()
        doInitialDataLoad()
    }

    func setupView() {
        view.backgroundColor = .white
        
        makeHeroTitle()
        makeHeroPhotoView()
        makeHeroDescription()
        makeSpinner()
        
        view.addSubview(heroNameLabel)
        view.addSubview(heroPhoto)
        view.addSubview(heroDescription)
        view.addSubview(spinner)
        
        makeLayout()
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
    }
    
    private func makeHeroTitle(){
        let label = UILabel()
        
        label.numberOfLines = 2
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20)
        label.text = "GAAAAAA"
        label.isHidden = true
        label.translatesAutoresizingMaskIntoConstraints = false
        
        self.heroNameLabel = label
    }
    
    private func makeHeroPhotoView(){
        
        let imageView = UIImageView()
        
        imageView.contentMode = .scaleToFill
        imageView.clipsToBounds = true
        imageView.isHidden = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        
        self.heroPhoto = imageView
    }
    
    private func makeHeroDescription(){
        
        let label = UILabel()
        
        label.textAlignment = .left
        label.numberOfLines = 0
        label.font = UIFont.systemFont(ofSize: 14)
        label.isHidden = true
        label.translatesAutoresizingMaskIntoConstraints = false
        
        self.heroDescription = label
    }
    
    func makeSpinner(){
        let spinner = UIActivityIndicatorView()
        
        spinner.hidesWhenStopped = true
        spinner.isHidden = false
        spinner.translatesAutoresizingMaskIntoConstraints = false
        
        self.spinner = spinner
    }
    
    private func makeLayout(){
        
        NSLayoutConstraint.activate([
            spinner.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            spinner.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            heroNameLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            heroNameLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            heroNameLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            heroPhoto.topAnchor.constraint(equalTo: heroNameLabel.bottomAnchor, constant: 20),
            heroPhoto.heightAnchor.constraint(equalToConstant: 200),
            heroPhoto.widthAnchor.constraint(equalToConstant: 200),
            heroPhoto.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            heroDescription.topAnchor.constraint(equalTo: heroPhoto.bottomAnchor, constant: 20),
            heroDescription.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 30),
            heroDescription.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -30)
        ])
        
    }

    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doInitialDataLoad() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        guard let heroId = self.heroId else { return }
        
        spinner.startAnimating()
        
        interactor.doInitialDataLoad(request: HeroDetailScene.InitialDataLoad.Request(heroId: heroId))
    }

    // MARK: - Display logic
    
    func displayInitialDataLoad(viewModel: HeroDetailScene.InitialDataLoad.ViewModel.heroInfo) {
        // NOTE: Stop loading animation here
        // NOTE: Display the result from the Presenter
        // somethingLabel.text = viewModel.name
        
        
        self.title = viewModel.heroName
        
        heroNameLabel.text = viewModel.heroName
        heroNameLabel.isHidden = false
        
        heroPhoto.sd_setImage(with: viewModel.heroPhotoUrl)
        heroPhoto.isHidden = false
        
        if viewModel.heroDescription.isEmpty{
            heroDescription.text = "No hay descripci√≥n disponible :( == Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae dignissim risus. Praesent purus sapien, ullamcorper in condimentum at, efficitur ut neque. Ut laoreet, turpis ac blandit ornare, ligula quam vestibulum augue, sed imperdiet tellus velit vel nunc. Vestibulum et mi placerat, tristique lectus nec, efficitur metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin tristique ultricies quam at tempor. Suspendisse pulvinar commodo turpis, in consectetur erat. Ut lobortis arcu ut consequat hendrerit. Cras vitae turpis in enim ultrices viverra ut nec lorem."
        }else{
            heroDescription.text = viewModel.heroDescription
        }
        
        heroDescription.isHidden = false
        
        spinner.stopAnimating()
        
    }
    
    func displayAlertError(viewModel: HeroDetailScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        
        spinner.stopAnimating()
        
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

}
