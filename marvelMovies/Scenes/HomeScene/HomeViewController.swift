//
//  HomeViewController.swift
//  marvelMovies
//
//  Created by Franco Marquez on 23/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit

class HomeViewController: UIViewController {

    var interactor: HomeInteractor!
    var router: HomeRouter!

    // MARK: - Object variables

    // NOTE: Only store objects here if required
    // private var displayedSomethings: [initialLoad]?
    private var heros: [HomeScene.initialLoad.ViewModel.HeroProfileInitialDataLoad.HeroProfileData]?
    private var headerHeight = 150.0
    
    
    // MARK: - Inteface objects
    
    private var spinner : UIActivityIndicatorView!
    private var heroProfiles : UICollectionView!
    private var heroTableView : UITableView!

    // @IBOutlet private weak var somethingLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        HomeConfigurator.configure(viewController: self)
        setupView()
        doinitialLoad()
    }

    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        title = "Home"
        view.backgroundColor = .white
//        navigationController?.navigationBar.backgroundColor = .whitexx
        makeViews()
        addViews()
        setupLayout()
    }
    
    func makeViews(){
        
        makeSpinner()
        makeHeroProfilesView()
        makeHeroTableView()
    }
    
    func addViews(){
        view.addSubview(spinner)
        view.addSubview(heroTableView)
    }
    
    func setupLayout(){
        
        NSLayoutConstraint.activate([
            spinner.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            spinner.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            heroTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            heroTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            heroTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            heroTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        
    }
    
    func makeSpinner(){
        let spinner = UIActivityIndicatorView()
        
        spinner.hidesWhenStopped = true
        spinner.isHidden = false
        spinner.translatesAutoresizingMaskIntoConstraints = false
        
        self.spinner = spinner
    }
    
    func makeHeroProfilesView(){
        
        let collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.scrollDirection = .horizontal
        collectionViewLayout.minimumInteritemSpacing = 8
        collectionViewLayout.itemSize = CGSize(width: 100, height: headerHeight)
        
        heroProfiles = UICollectionView(frame: view.frame, collectionViewLayout: collectionViewLayout)
        heroProfiles.register(HomeHeroProfileCell.self, forCellWithReuseIdentifier: HomeHeroProfileCell.id)
        heroProfiles.dataSource = self
        heroProfiles.delegate = self
        heroProfiles.backgroundColor = .white
        heroProfiles.translatesAutoresizingMaskIntoConstraints = false
//        heroProfiles.isHidden = true
        heroProfiles.showsHorizontalScrollIndicator = false
        //heroProfiles.num = 1
        
    }
    
    func makeHeroTableView(){
        let tableView = UITableView()
        tableView.register(UITableViewHeaderFooterView.self, forHeaderFooterViewReuseIdentifier: "header")
        
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(HomeHeroTableCell.self, forCellReuseIdentifier: HomeHeroTableCell.id)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.isHidden = true
        
        self.heroTableView = tableView
    }
    // MARK: - Interaction handling

    // MARK: - Event handling

    func doinitialLoad() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        spinner.startAnimating()
        interactor.doinitialLoad(request: HomeScene.initialLoad.Request())
    }

    // MARK: - Display logic
    
    func displayinitialLoad(viewModel: HomeScene.initialLoad.ViewModel.HeroProfileInitialDataLoad) {
        // NOTE: Stop loading animation here
        // NOTE: Display the result from the Presenter
        self.heros = viewModel.heros
        spinner.stopAnimating()
        heroProfiles.reloadData()
        heroTableView.isHidden = false
        heroTableView.reloadData()
    }
    
    func displayAlertError(viewModel: HomeScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        spinner.stopAnimating()
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

}

extension HomeViewController: UICollectionViewDelegate{
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let hero = heros?[indexPath.row] else { return }
        
        self.router.navigateToHeroDetailScene(heroId: hero.heroId)
    }
    
}

extension HomeViewController: UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        if let heros = self.heros {
            return heros.count
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HomeHeroProfileCell.id, for: indexPath) as! HomeHeroProfileCell
        
        guard let heros = self.heros else { return UICollectionViewCell() }
       
        let hero = heros[indexPath.row]
        
        cell.setHeroName(name: hero.name)
        print(hero.name)
        print(hero.photoURL)
        cell.setHeroImage(Url: hero.photoURL)
        
        return cell
    }
    
}

extension HomeViewController: UITableViewDelegate{
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: "header")
        
        header?.addSubview(heroProfiles)
        
        NSLayoutConstraint.activate([
            heroProfiles.topAnchor.constraint(equalTo: heroProfiles.superview!.topAnchor),
            heroProfiles.leadingAnchor.constraint(equalTo: heroProfiles.superview!.leadingAnchor),
            heroProfiles.trailingAnchor.constraint(equalTo: heroProfiles.superview!.trailingAnchor),
            heroProfiles.heightAnchor.constraint(equalToConstant: headerHeight)
        ])
        
        return header
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return headerHeight
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let hero = heros?[indexPath.row] else { return }
        
        self.router.navigateToHeroDetailScene(heroId: hero.heroId)
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

extension HomeViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let heros = self.heros {
            return heros.count
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: HomeHeroTableCell.id) as! HomeHeroTableCell
        
        guard let heros = self.heros else { return UITableViewCell() }
        
        let hero = heros[indexPath.row]
        cell.setName(name: hero.name)
        cell.setImage(urlString: hero.photoURL)
        print(hero.name)
        print(hero.heroId)
        
        return cell
    }
    
    
}
