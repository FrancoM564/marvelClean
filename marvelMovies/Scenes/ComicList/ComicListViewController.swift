//
//  ComicListViewController.swift
//  marvelMovies
//
//  Created by Franco Marquez on 28/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit

class ComicListViewController: UIViewController {

    var interactor: ComicListInteractor!
    var router: ComicListRouter!

    // MARK: - Object variables

    // NOTE: Only store objects here if required
    // private var displayedSomethings: [InitialComicListDataLoad]?
    private var comics: [ComicListScene.InitialComicListDataLoad.ViewModel.Comics]?

    // MARK: - Inteface objects
    
    private var spinner : UIActivityIndicatorView!
    private var comicsTableView: UITableView!

    // @IBOutlet private weak var somethingLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        ComicListConfigurator.configure(viewController: self)
        title = "Comics"
        setupView()
        doInitialComicListDataLoad()
    }

    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        makeViews()
    }
    
    func makeTableView(){
        
        let table = UITableView()
        
        table.delegate = self
        table.dataSource = self
        table.register(ComicTableCell.self, forCellReuseIdentifier: ComicTableCell.id)
        table.translatesAutoresizingMaskIntoConstraints = false
        table.isHidden = true
        
        self.comicsTableView = table
        
    }
    
    func makeViews(){
        makeSpinner()
        makeTableView()
        
        view.addSubview(spinner)
        view.addSubview(self.comicsTableView)
        
        makeLayouts()
    }
    
    func makeSpinner(){
        let spinner = UIActivityIndicatorView()
        
        spinner.hidesWhenStopped = true
        spinner.isHidden = false
        spinner.translatesAutoresizingMaskIntoConstraints = false
        
        self.spinner = spinner
    }
    
    func makeLayouts(){
        
        NSLayoutConstraint.activate([
            spinner.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            spinner.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            comicsTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            comicsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            comicsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            comicsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
    }

    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doInitialComicListDataLoad() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        spinner.startAnimating()
        
        interactor.doInitialComicListDataLoad(request: ComicListScene.InitialComicListDataLoad.Request())
    }

    // MARK: - Display logic
    
    func displayInitialComicListDataLoad(viewModel: ComicListScene.InitialComicListDataLoad.ViewModel.ComicList) {
        // NOTE: Stop loading animation here
        // NOTE: Display the result from the Presenter
        // somethingLabel.text = viewModel.name
        
        self.comics = viewModel.comics
        self.comicsTableView.isHidden = false
        self.comicsTableView.reloadData()
        spinner.stopAnimating()
    }
    
    func displayAlertError(viewModel: ComicListScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        spinner.stopAnimating()
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

}

extension ComicListViewController: UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let comic = comics?[indexPath.row] else { return }
        
        self.router.navigateToComicDetail(comicId: comic.comicID)
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
    
}

extension ComicListViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        guard let comics = self.comics else {
            return 0
        }
        
        return comics.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: ComicTableCell.id) as! ComicTableCell
        
        guard let comics = self.comics else { return UITableViewCell() }
        
        let comic = comics[indexPath.row]
        
        cell.setName(name: comic.comicName)
        cell.setImage(url: comic.comicPhotoURL)
        
        return cell
        
    }
    
    
}
